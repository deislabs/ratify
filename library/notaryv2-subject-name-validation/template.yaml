apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: notaryv2snvalidation
spec:
  crd:
    spec:
      names:
        kind: NotaryV2SNValidation
      validation:
        openAPIV3Schema:
          type: object
          properties:
            sn:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package notaryv2snvalidation
        
        # Get data from Ratify
        remote_data := response {
          images := [img | img = input.review.object.spec.containers[_].image]
          response := external_data({"provider": "ratify-provider", "keys": images})
        }

        # Base Gatekeeper violation
        violation[{"msg": msg}] {
          general_violation[{"result": msg}]
        }
        
        # Check if there are any system errors
        general_violation[{"result": result}] {
          err := remote_data.system_error
          err != ""
          result := sprintf("System error calling external data provider: %s", [err])
        }
        
        # Check if there are errors for any of the images
        general_violation[{"result": result}] {
          count(remote_data.errors) > 0
          result := sprintf("Error validating one or more images: %s", remote_data.errors)
        }
        
        # Check if the success criteria is true
        general_violation[{"result": result}] {
          subject_validation := remote_data.responses[_]
          subject_validation[1].isSuccess == false
          result := sprintf("Subject failed verification: %s", [subject_validation[0]])
        }

        # Check that signature result for SN exists
        general_violation[{"result": result}] {
          subject_results := remote_data.responses[_]
          subject_result := subject_results[1]
          notaryv2_results := [res | subject_result.verifierReports[i].name == "notaryv2"; res := subject_result.verifierReports[i]]
          sn_results := [res | notaryv2_results[i].extensions.SN == input.parameters.sn; res := notaryv2_results[i]]
          count(sn_results) == 0
          result := sprintf("Subject %s has no signatures for certificate with SN: %s", [subject_results[0], input.parameters.sn])
        }
        
        # Check for valid signature
        general_violation[{"result": result}] {
          subject_results := remote_data.responses[_]
          subject_result := subject_results[1]
          notaryv2_results := [res | subject_result.verifierReports[i].name == "notaryv2"; res := subject_result.verifierReports[i]]
          notaryv2_result := notaryv2_results[_]
          notaryv2_result.isSuccess == false
          notaryv2_result.extensions.SN == input.parameters.sn
          result = sprintf("Subject %s failed signature validation: %s", [subject_results[0], notaryv2_result.message])
        }
